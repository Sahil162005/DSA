class Solution {
public:
    int pivot(vector<int>& nums,int n){
        int i=0;
       int  j=n-1;
        int k=i+(j-i)/2;
        while(i<j){
            int k=i+(j-i)/2;

            if(i==j){
                return i;
            }
            else if(k>0 && nums[k]<nums[k-1]){
                return k-1;}
            else if(k<n-1 && nums[k]>nums[k+1]){
                return k;
            }
            else if(nums[i]>nums[k]){
                j=k-1;
            }
            else{
                i=k+1;
            }

            }
            return 0;

        }

    
    int binary(vector<int>& nums,int target,int i,int j){
        int k=i+(j-i)/2;
        while(i<=j){
            int k=i+(j-i)/2;

            if(nums[k]==target){
                return k;
            }
            else if(nums[k]>target){
                j=k-1;
            }
            else{
                i=k+1;
            }
        }
        return -1;
    }
    int search(vector<int>& nums, int target) {
        int ans;
        int num;
        int n=nums.size();
        ans=pivot(nums,n);
        if(target>=nums[0] && target<=nums[ans]){
        num= binary(nums,target,0,ans);
        }
        else{
        num= binary(nums,target,ans+1,n-1);
        }

        return num;
        
    }
};
