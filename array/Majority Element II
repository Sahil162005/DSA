class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        int n=nums.size();
        int cnt=0;
        unordered_map<int,int>ans;
        vector<int> ans1;
        for(int i=0;i<n;i++){
            ans[nums[i]]++;
        }
        for(auto it:ans){
            if(it.second>n/3){
                ans1.push_back(it.first);
                
            }
        }
        return ans1;
        
    }
};
// method 2
 vector<int> majorityElement(vector<int>& nums) {
        int n=nums.size();
        int cnt1=0;
        int cnt2=0;
        int el1=0;
        int el2=0;
        vector<int>ans;
        for(int i=0;i<n;i++){
            if (nums[i] == el1) {
                cnt1++;
            } else if (nums[i] == el2) {
                cnt2++;
            } else if (cnt1 == 0 && nums[i]!=el2) {
                el1 = nums[i];
                cnt1 = 1;
            } else if (cnt2 == 0 && nums[i]!=el1) {
                el2 = nums[i];
                cnt2 = 1;
            } else {
                cnt1--;
                cnt2--;
            }
            
        }
        int cnt3=0,cnt4=0;
        for(int i=0;i<n;i++){
            if(nums[i]==el1){
                cnt3++;
            }
            else if(nums[i]==el2){
                cnt4++;
            }
        }
        if(cnt3>n/3){
        ans.push_back(el1);
        }
        if(cnt4>n/3){
        ans.push_back(el2);
        }
        return ans;
        
    }
